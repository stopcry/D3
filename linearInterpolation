<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <title>数剧</title>

    <script type="text/javascript" src="/D3/d3.js"></script>
    <style>
        line {
            stroke: rgb(54, 54, 54);
        }
        
        div {
            background-color: rgb(0, 126, 42);
        }
        
        div.v-bar {
            width: 20px;
            margin: 0;
            border: 1px solid #000;
        }
        
        div.fixed-cell {
            border: solid 1px rgb(138, 138, 138);
            width: 100px;
            height: 60px;
            text-align: center;
            line-height: 60px;
        }
    </style>
</head>

<body>
    <script type="text/javascript">
        var width = 500,
            height = 300,
            margin = 30,
            x = d3.scaleLinear()
            .domain([0, 10])
            .range([margin, width - margin]),
            y = d3.scaleLinear()
            .domain([0, 10])
            .range([margin, height - margin]);

        var data = [
            [{
                x: 0,
                y: 5
            }, {
                x: 1,
                y: 9
            }, {
                x: 2,
                y: 7
            }, {
                x: 3,
                y: 5
            }, {
                x: 4,
                y: 3
            }, {
                x: 6,
                y: 4
            }, {
                x: 7,
                y: 2
            }, {
                x: 8,
                y: 3
            }, {
                x: 9,
                y: 2
            }, ],
            d3.range(10).map(function(i) {
                return {
                    x: i,
                    y: Math.sin(i) + 5
                };
            })
        ];

        var svg = d3.select("body").append("svg");

        svg.attr("width", width)
            .attr("height", height);

        renderAxis(svg);

        render(d3.curveLinear);

        renderDots(svg);

        function render(mode) {
            var line = d3.line()
                .x(function(d) {
                    return x(d.x);
                })
                .y(function(d) {
                    return y(d.y);
                })
                .curve(mode);

            svg.selectAll("path.line")
                .data(data)
                .enter()
                .append("path")
                .attr("class", "line");

            svg.selectAll("path.line")
                .data(data)
                .attr("d", function(d) {
                    return line(d);
                })
                .attr("stroke", "black") //svg中的path默认会对闭合区域进行填充
                .attr("fill", "none"); //，如果结果要求是线条，需要设置填充区域为空值。
        }

        function renderDots(svg) {
            data.forEach(function(set) {
                svg.append("g").selectAll("circle")
                    .data(set)
                    .enter().append("circle")
                    .attr("class", "dot")
                    .attr("cx", function(d) {
                        return x(d.x);
                    })
                    .attr("cy", function(d) {
                        return y(d.y);
                    })
                    .attr("r", 4.5);
            })
        }

        function renderAxis(svg) {
            var axisWidth = width - 2 * margin,
                axisHeight = height - 2 * margin;

            var xScale = d3.scaleLinear()
                .domain([0, 100])
                .range([0, axisWidth]);

            var yScale = d3.scaleLinear()
                .domain([0, 100])
                .range([axisHeight, 0]);

            var subScale = d3.scaleLinear()
                .domain([0, 5])
                .range([0, axisWidth / 5]);

            var xAxis = d3.axisBottom()
                .scale(xScale);

            svg.append("g")
                .attr("class", "x-axis")
                .attr("transform", function() {
                    return "translate(" + margin + "," + (height - margin) + ")";
                })
                .call(xAxis);

            var yAxis = d3.axisLeft()
                .scale(yScale);

            svg.append("g")
                .attr("class", "y-axis")
                .attr("transform", function() {
                    return "translate(" + margin + "," + margin + ")";
                })
                .call(yAxis);
        }
    </script>
    <div id="control-group">
        <button onclick="render(d3.curveLinear)">linear</button>
        <button onclick="render(d3.curveLinearClosed)">linear-closed</button>
        <button onclick="render(d3.curveStepBefore)">step-before</button>
        <button onclick="render(d3.curveStepAfter)">step-after</button>
        <button onclick="render(d3.curveBasis)">basis</button>
        <button onclick="render(d3.curveBasisOpen)">basis-open</button>
        <button onclick="render(d3.curveBasisClosed)">basis-closed</button>
        <br>
        <button onclick="render(d3.curveBundle)">bundle</button>
        <button onclick="render(d3.curveCardinal)">cardinal</button>
        <button onclick="render(d3.curveCardinalOpen)">cardinal-open</button>
        <button onclick="render(d3.curveCardinalClosed)">cardinal-closed</button>
        <button onclick="render(d3.curveMonotoneX)">monotone-x</button>
        <button onclick="render(d3.curveMonotoneY)">monotone-y</button>
    </div>
</body>

</html>
